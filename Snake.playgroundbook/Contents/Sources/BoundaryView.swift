import Foundation
import UIKit


/// Boundary view draws a 3D(2.5D) border. The size and the color is customisable.
class BoundaryView: UIView {
    
    /// base color of the border
    var color: UIColor = .blue {
        didSet{ setNeedsDisplay() }
    }
    
    /// darkened base color by 0.2
    var shadow: UIColor {
        return color.darkened(by: 0.2)
    }
    override func draw(_ rect: CGRect) {
        drawBox(size: rect.size)
    }
    // This code was generated by Trial version of PaintCode, therefore cannot be used for commercial purposes.
    // http://www.paintcodeapp.com
    
    func drawBox(shadowSize: CGFloat = 5, borderSize: CGFloat = 20, size: CGSize = CGSize(width: 300, height: 300)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Color Declarations
        
        //// Variable Declarations
        let boxWidth: CGFloat = size.width - shadowSize
        let innerWidth: CGFloat = boxWidth - borderSize * 2
        let shadowRight: CGFloat = boxWidth + shadowSize
        let boxHeight: CGFloat = size.height - shadowSize
        let innerHeight: CGFloat = boxHeight - borderSize * 2
        let shadowBottom: CGFloat = boxHeight + shadowSize
        
        //// Shadow Left Drawing
        let shadowLeftPath = UIBezierPath(rect: CGRect(x: borderSize, y: borderSize, width: shadowSize, height: innerHeight))
        shadow.setFill()
        shadowLeftPath.fill()
        
        
        //// Shadow Top Drawing
        let shadowTopPath = UIBezierPath(rect: CGRect(x: borderSize, y: borderSize, width: innerWidth, height: shadowSize))
        shadow.setFill()
        shadowTopPath.fill()
        
        
        //// Shadow Bottom And Right Drawing
        let shadowBottomAndRightPath = UIBezierPath()
        shadowBottomAndRightPath.move(to: CGPoint(x: 0, y: boxHeight))
        shadowBottomAndRightPath.addLine(to: CGPoint(x: shadowSize, y: shadowBottom))
        shadowBottomAndRightPath.addLine(to: CGPoint(x: shadowRight, y: shadowBottom))
        shadowBottomAndRightPath.addLine(to: CGPoint(x: shadowRight, y: shadowSize))
        shadowBottomAndRightPath.addLine(to: CGPoint(x: boxWidth, y: 0))
        shadowBottomAndRightPath.addLine(to: CGPoint(x: boxWidth, y: boxHeight))
        shadowBottomAndRightPath.addLine(to: CGPoint(x: 0, y: boxHeight))
        shadowBottomAndRightPath.close()
        shadow.setFill()
        shadowBottomAndRightPath.fill()
        
        
        //// Box Bottom Drawing
        context.saveGState()
        context.translateBy(x: -0, y: boxHeight)
        context.rotate(by: -90 * CGFloat.pi/180)
        
        let boxBottomPath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: borderSize, height: boxWidth))
        color.setFill()
        boxBottomPath.fill()
        
        context.restoreGState()
        
        
        //// Box Right Drawing
        context.saveGState()
        context.translateBy(x: boxWidth, y: boxHeight)
        context.rotate(by: -180 * CGFloat.pi/180)
        
        let boxRightPath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: borderSize, height: boxHeight))
        color.setFill()
        boxRightPath.fill()
        
        context.restoreGState()
        
        
        //// Box Top Drawing
        let boxTopPath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: boxWidth, height: borderSize))
        color.setFill()
        boxTopPath.fill()
        
        
        //// Box Left Drawing
        let boxLeftPath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: borderSize, height: boxHeight))
        color.setFill()
        boxLeftPath.fill()
    }

}
